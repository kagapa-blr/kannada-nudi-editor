name: Build and Release Kannada Nudi Editor

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Required for creating a release

jobs:
  setup:
    name: Setup Environment
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install dependencies in Virtual Environment
      run: |
        pwsh setup_env.ps1  # Run the PowerShell script to set up venv and install dependencies
      shell: pwsh

  build:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: setup  # Wait for setup job to complete

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Virtual Environment
      run: |
        pwsh setup_env.ps1  # Ensure virtual environment is active
      shell: pwsh

    - name: Install PyInstaller
      run: |
        .\.venv\Scripts\Activate.ps1
        pip install pyinstaller
      shell: pwsh

    - name: Build Windows Artifact
      run: |
        .\.venv\Scripts\Activate.ps1
        python build_win.py  # Run the script to generate the executable
      shell: pwsh

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kannadaNudi-build
        path: dist/kannadaNudi/kannadaNudi.zip  # Upload the generated zip file

  release:
    name: Create GitHub Release
    runs-on: windows-latest
    needs: build  # Wait for the build job to complete

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure all tags are fetched

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: kannadaNudi-build
        path: dist/kannadaNudi/

    - name: Get Latest Version Tag
      id: get_version
      shell: pwsh
      run: |
        git fetch --tags
        # Get all version tags that match semantic versioning (ignores timestamp-based tags)
        $LATEST_TAG = git tag -l 'v*' --sort=-v:refname | Where-Object { $_ -match '^v\d+\.\d+\.\d+$' } | Select-Object -First 1
        if (-not $LATEST_TAG) {
          $NEW_VERSION = "v1.0.0"
        } else {
          $VERSION = $LATEST_TAG.TrimStart('v')
          $VERSION_PARTS = $VERSION.Split('.')
          $PATCH = [int]$VERSION_PARTS[2] + 1
          $NEW_VERSION = "v$($VERSION_PARTS[0]).$($VERSION_PARTS[1]).$PATCH"
        }
        echo "NEW_VERSION=$NEW_VERSION" >> $env:GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Create and Push New Tag
      run: |
        # Create a new version tag and push it
        git tag ${{ env.NEW_VERSION }}
        git push origin ${{ env.NEW_VERSION }}

    - name: Wait for Tag Push to Complete
      run: git fetch --tags

    - name: Create GitHub Release and Upload Artifact
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_VERSION }}  # Use the new version tag
        files: dist/kannadaNudi/kannadaNudi.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
