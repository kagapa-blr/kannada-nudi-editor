name: Build and Release Kannada Nudi Editor

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write  # Required for creating a release

jobs:
  setup:
    name: Setup Environment
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: pwsh

  build:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: setup  # Wait for setup job to complete

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install PyInstaller
      run: pip install pyinstaller
      shell: pwsh

    - name: Build Windows Artifact
      run: |
        python build_win.py  # Run the script to generate the executable
      shell: pwsh

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kannadaNudi-build
        path: dist/kannadaNudi/kannadaNudi.zip  # Upload the generated zip file

  release:
    name: Create GitHub Release
    runs-on: windows-latest  # Change this to `windows-latest` for the release job

    needs: build  # Wait for the build job to complete

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: kannadaNudi-build
        path: dist/kannadaNudi/

    - name: Get Latest Version Tag
      id: get_version
      run: |
        git fetch --tags
        # Get the latest tag and increment the patch version
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
        
        if [[ -z "$LATEST_TAG" || ! "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          NEW_VERSION="v1.0.0"
        else
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))  # Increment patch number
          NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Check and Increment Tag
      run: |
        # Check if the tag exists, and increment it if it does
        TAG_EXISTS=$(git rev-parse $NEW_VERSION 2>/dev/null)
        if [[ -n "$TAG_EXISTS" ]]; then
          echo "Tag $NEW_VERSION already exists. Incrementing the version."
          
          # Increment patch version if the tag exists
          VERSION=$(echo $NEW_VERSION | sed 's/v//')
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))  # Increment patch number
          NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          echo "New version: $NEW_VERSION"
        fi
        
        # Create and push the tag
        git tag $NEW_VERSION
        git push origin $NEW_VERSION

    - name: Create GitHub Release and Upload Artifact
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_VERSION }}
        files: dist/kannadaNudi/kannadaNudi.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
